# This workflow will build, test and deploy a MuleSoft project
name: DEV CI/CD

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events on dev branch
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      workerSize:
        description: 'Size of worker'     
        default: '0.1'
        type: choice
        options:
        - '0.1'
        - '0.2'
        - '1'
        - '2'
        - '4'
        - '8'
        - '16'
      workers:
        description: 'Number of workers'     
        default: '1'
        type: choice
        options:
        - '1'
        - '2'
        - '3'
        - '4'
        - '5'
        - '6'
        - '7'
        - '8'
      region:
        description: 'AWS region'
        default: 'us-east-1'
        type: choice
        options:
        - 'us-east-1'
        - 'us-east-2'
        - 'us-west-1'
        - 'us-west-2'
        - 'ca-central-1'
        - 'sa-east-1'
        - 'ap-southeast-1'
        - 'ap-southeast-2'
        - 'ap-northeast-1'
        - 'eu-central-1'
        - 'eu-west-1'
        - 'eu-west-2'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
   # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v2
        with:
          java-version: '8.0'
          distribution: 'adopt'
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # Create file settings.xml for maven
      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v18
        with:
          repositories: '[{"id": "anypoint-exchange-v2","name": "Anypoint Exchange","url": "https://maven.anypoint.mulesoft.com/api/v2/maven","layout": "default","releases": {"enabled": "true"},"snapshots": {"enabled": "true"}}]'
          servers: '[{"id": "anypoint-exchange-v2","username": "${username}","password": "${password}"}]'
          profiles: '[{"id": "anypoint-exchange-v2","activation": {"activeByDefault": "true"}}]'
          output_file: .m2/settings.xml
      # Build project
      - name: Build
        env:
          USERNAME: ${{ secrets.username }}
          PASSWORD: ${{ secrets.password }}
        run: mvn -B package -file pom.xml -s .m2/settings.xml -DskipTests=true -Dusername="${USERNAME}" -Dpassword="${PASSWORD}"
      # Get short commit hash
      - name: Get short commit hash
        run: echo "COMMIT_HASH=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV
      # Save name for future package jar
      - name: Set archive name
        run: echo "ARCHIVE_NAME=${{ github.event.repository.name }}-${{ env.COMMIT_HASH }}"  >> $GITHUB_ENV
      # Rename jar
      - name: Artifact file name with commit hash
        run: |
          artifactName1=$(ls target/*.jar | head -1)
          artifactName2=${artifactName1//.jar/.$COMMIT_HASH.jar}
          mv $artifactName1 $artifactName2
      # Upload jar to github storage
      - name: Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: target/*.jar
  test:
    needs: build
   # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # Create file settings.xml for maven
      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v18
        with:
          repositories: '[{"id": "MuleEE-Repository","name": "MuleEE-Repository","url": "https://repository.mulesoft.org/nexus-ee/content/repositories/releases-ee/","layout": "default","releases": {"enabled": "true"},"snapshots": {"enabled": "true"}}]'
          servers: '[{"id": "MuleEE-Repository","username": "${repo.userName}","password": "${repo.password}"}]'
          profiles: '[{"id": "MuleEE-Repository","activation": {"activeByDefault": "true"}}]'
          output_file: .m2/settings.xml
      # Runs tests
      - name: Test
        env:
          USERNAME: ${{ secrets.repo_user_name }}
          PASSWORD: ${{ secrets.repo_password }}
          ENV: dev
          PROPERTY_KEY: ${{ secrets.property_key }}
        run: mvn test -file pom.xml -s .m2/settings.xml -Drepo.userName="$USERNAME" -Drepo.password="$PASSWORD" -Denv="$ENV" -Dproperty.key="$PROPERTY_KEY"
  deploy:
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    env:
          USERNAME: ${{ secrets.username }}
          PASSWORD: ${{ secrets.password }}
          APP_NAME: ${{ github.event.repository.name }}
          PROPERTY_KEY: ${{ secrets.property_key }}
          CLOUD_ENV: dev
          WORKERS: ${{ github.event.inputs.workers }}
          WORKER_SIZE: ${{ github.event.inputs.workerSize }}
          REGION: ${{ github.event.inputs.region }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # Get short commit hash
      - name: Get short commit hash
        run: echo "COMMIT_HASH=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV
      # Create name for artifact 
      - name: Set archive name
        run: echo "ARCHIVE_NAME=${{ github.event.repository.name }}-${{ env.COMMIT_HASH }}"  >> $GITHUB_ENV
      # Download artifact from github storage
      - name: Download artifact
        uses: actions/download-artifact@master
        with:
          name: ${{ env.ARCHIVE_NAME }}
      # Use node.js for Anypoint CLI
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '15.x'
      # Install Anypoint CLI
      - name: Install Anypoint CLI
        run: npm install -g anypoint-cli@latest
      # Checks if application exist in cloud
      - name: Run Anypoint CLI
        run: echo "STATUS=$(echo $(anypoint-cli --username=$USERNAME --password=$PASSWORD  --organization=Home --environment=Sandbox runtime-mgr cloudhub-application describe "${CLOUD_ENV}-${APP_NAME}"))" >> $GITHUB_ENV
      # Log STATUS
      - name: Echo
        run: echo $STATUS
      - name: Checks error
        if: "contains(env.STATUS, 'Error') && !contains(env.STATUS, 'No application with domain')"
        run: anypoint-cli --username=$USERNAME --password=$PASSWORD  --organization=Home --environment=Sandbox runtime-mgr cloudhub-application describe "${CLOUD_ENV}-${APP_NAME}"
      # Deploy new application
      - name: Application doesn't exist
        if: "contains(env.STATUS, 'Error') && contains(env.STATUS, 'No application with domain')"
        run: |
            echo "Doesn't exist"
            artifactName=$(ls *.jar | head -1)
            anypoint-cli --username=$USERNAME --password=$PASSWORD --organization=Home --environment=Sandbox runtime-mgr cloudhub-application deploy --workerSize $WORKER_SIZE --region $REGION --workers $WORKERS --property "property.key:${PROPERTY_KEY}" --property "env:${CLOUD_ENV}" "${CLOUD_ENV}-${APP_NAME}" $artifactName
      # Modify existing application
      - name: Application exists
        if: "!contains(env.STATUS, 'Error')"
        run: |
            echo "Exists"
            artifactName=$(ls *.jar | head -1)
            anypoint-cli --username=$USERNAME --password=$PASSWORD --organization=Home --environment=Sandbox runtime-mgr cloudhub-application modify "${CLOUD_ENV}-${APP_NAME}" $artifactName
